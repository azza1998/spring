--- 
apiVersion: v1
kind: Template
metadata: 
  annotations: 
    description: "docker spring application"
    tags: "${APP_NAME}"
  name: "${APP_NAME}"
objects: 
  - 
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata: 
      labels: 
        app: "${APP_NAME}"
      name: default_view
    roleRef: 
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: view
    subjects: 
      - 
        kind: ServiceAccount
        name: default
  - 
    apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata: 
      labels: 
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec: 
      tags: 
        - 
          name: latest
  - 
    apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata: 
      labels: 
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec: 
      output: 
        to: 
          kind: ImageStreamTag
          name: "${APP_NAME}:latest"
      runPolicy: Serial
      source: 
        contextDir: /
        git: 
          ref: "${GIT_REF}"
          uri: "${GIT_URL}"
        type: Git
      strategy: 
        sourceStrategy: 
          from: 
            kind: ImageStreamTag
            name: "java:8"
            namespace: openshift
        type: Source
  - 
    apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata: 
      labels: 
        build: "${APP_NAME}-${GIT_REF}-git"
      name: "${APP_NAME}-${GIT_REF}-git"
    spec: 
      runPolicy: Serial
      source: 
        git: 
          ref: "${GIT_REF}"
          uri: "${GIT_URL}"
        type: Git
      strategy: 
        jenkinsPipelineStrategy: 
          jenkinsfile: |-
              def mvnCmd = "mvn -s configuration/cicd-settings-nexus.xml"
              pipeline {
                agent {
                  label 'maven'
                }

                stages {
                  stage('Build App') {
                    steps {
                      git branch: "${GIT_REF}", url: "${GIT_URL}"
                      sh "mvn versions:set clean package -DskipTests"
                    }
                  }
                  stage('Code Analysis') {
                    steps {
                      script {
                        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                      }
                    }
                  }
                   stage('Archive App') {
                    steps {
                      sh "${mvnCmd} fabric8:deploy -DskipTests=true -P nexus"
                    }
                  }
                
                  stage('Build Image') {
                    steps {
                      sh "cp target/app.jar target/application.jar"
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEMO_PROJECT) {
                            openshift.startBuild("${APP_NAME}", "--from-file=target/application.jar", "--wait=true").logs("-f")
                          }
                        }
                      }
                    }
                  }
                  
                  stage('Deploy') {
                    steps {
                     
                      script {
                        openshift.withCluster() {
                            dc = openshift.selector("dc", "${APP_NAME}")
                            timeout(10) {
                                dc.rollout().status()
                          }
                        }
                      }
                    }
                  }

                
                
               }
              }
        type: JenkinsPipeline
      triggers: 
        - 
          type: ConfigChange
        - 
          github: 
            secret: lNW-G9fDOk--MYJ3iNK1
          type: GitHub
        - 
          generic: 
            secret: ZSyQC2Cy7nc6fMxZJMZi
          type: Generic
  - 
    apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata: 
      annotations: 
        app.openshift.io/vcs-ref: "${GIT_REF}"
        app.openshift.io/vcs-uri: "${GIT_URL}"
      labels: 
        app: "${APP_NAME}"
        app.kubernetes.io/part-of: "${APP_NAME}"
        app.openshift.io/runtime: spring
        app.openshift.io/runtime-version: "8"
      name: "${APP_NAME}"
    spec: 
      replicas: 1
      selector: 
        deploymentconfig: "${APP_NAME}"
      strategy: 
        type: Recreate
      template: 
        metadata: 
          labels: 
            app: "${APP_NAME}"
            deploymentconfig: "${APP_NAME}"
        spec: 
          containers: 
            - 
              image: "${APP_NAME}:latest"
              imagePullPolicy: Always
              name: "${APP_NAME}"
              ports: 
                - 
                  containerPort: 8080
                  protocol: TCP
                - 
                  containerPort: 8443
                  protocol: TCP
                - 
                  containerPort: 8778
                  protocol: TCP
      triggers: 
        - 
          type: ConfigChange
        - 
          imageChangeParams: 
            automatic: true
            containerNames: 
              - "${APP_NAME}"
            from: 
              kind: ImageStreamTag
              name: "${APP_NAME}:latest"
          type: ImageChange
  - 
    apiVersion: v1
    kind: Service
    metadata: 
      labels: 
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec: 
      ports: 
        - 
          name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - 
          name: 8443-tcp
          port: 8443
          protocol: TCP
          targetPort: 8443
        - 
          name: 8778-tcp
          port: 8778
          protocol: TCP
          targetPort: 8778
      selector: 
        deploymentconfig: "${APP_NAME}"
  - 
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata: 
      labels: 
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec: 
      port: 
        targetPort: 8080-tcp
      to: 
        kind: Service
        name: "${APP_NAME}"
        weight: 100
parameters: 
  - 
    description: "The name of the application"
    name: APP_NAME
    required: true
    value: dockerspring
  - 
    description: "The git url to build from"
    name: GIT_URL
    required: true
    value: "https://github.com/rohiddev/dockerspring.git"
  - 
    description: "The git branch/tag to pull from"
    name: GIT_REF
    required: true
    value: master

